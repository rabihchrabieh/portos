/*
 * Portos v1.7.0
 * Copyright (c) 2003-2014 by Rabih Chrabieh. All rights reserved.
 *
 * This module is the pfunc scheduler.
 */

#ifndef po_function_H
#define po_function_H

/* pfunc type
 */
typedef void (*po_function_Function)(void *message);

/*-GLOBAL-INLINE-
 * Restore priority functions context. This should be called at the end
 * of a hardware interrupt that called priority functions. An equivalent
 * of a software interrupt is generated by this routine.
 */
static inline void po_function_context(void)
{
}

/*-GLOBAL-INSERT-*/

/*-GLOBAL-
 * Call a pfunc. The priority of the pfunc is usually different from a
 * currently running pfunc. The new pfunc will start running immediately
 * if it's priority is higher. Otherwise, it will wait until higher
 * priority pfuncs are done.
 */
void po_function_call(po_function_Function func, int priority, void *message)
;

/*-GLOBAL-
 * Returns the current priority level
 */
int po_function_currPriority(void)
;

/*-GLOBAL-
 * Postpones all pfunc calls until a po_function_resume() is issued.
 * This is useful to call at interrupt level before calling po_function_call()
 * so that pfuncs don't execute at interrupt level. The pfuncs will get
 * executed later when a po_function_resume() is issued at software interrupt
 * level or equivalent.
 */
void po_function_postpone(void)
;

/*-GLOBAL-
 * Resumes the execution of pfuncs (if some were postponed).
 * Call this from the software interrupt, or equivalent, that 
 * is supposed to handle postponed pfuncs (scheduled at hardware interrupt
 * level but postponed to run here).
 */
void po_function_resume(void)
;

/*-GLOBAL- (better if inlined)
 * For optimization purposes, some pfuncs can take a message over stack
 * or can return a result inside the message they received. In this case,
 * it is mandatory that the pfunc has a higher or equal priority than the
 * current (caller) pfunc. This function checks that, and if the condition
 * is not verified, the code prints an error and crashes.
 * The postpone flag cannot be set either (ie, this particular pfunc cannot
 * be called from interrupt level).
 */
void po_function_priorityCheck(int priority)
;

/*-GLOBAL- (better if inlined)
 * For optimization and simplification purposes, some functions can raise
 * the priority level without calling a pfunc. In this case, the variables
 * in the stack are accessible (no need to malloc). The priority can only
 * be raised.
 * This function returns the previous priority level to be supplied to
 * po_function_priorityRestore() when restoring the priority level.
 * This function cannot be called from interrupt level. Define normal pfuncs
 * if they need to be called from interrupt level.
 * Basically, the code that needs to be protected with a mechanism similar
 * to "priority ceiling" in traditional RTOS (something like a semaphore),
 * should be wrapped with po_function_priorityRaise() and po_function_priorityRestore().
 */
int po_function_priorityRaise(int priority)
;

/*-GLOBAL- (better if inlined)
 * Use this function after a call to po_function_priorityRaise() to restore
 * the priority level. The argument returned by priorityRaise() should be
 * supplied to this function.
 */
void po_function_priorityRestore(int prevPriority)
;

/*-GLOBAL-
 * One time init of this module
 */
void po_function_init(void)
;

/*-GLOBAL-
 * Displays sorted nodes in tree. Works recursively.
 */
void po_function_treeDisplay(void)
;

/*-GLOBAL-INSERT-END-*/


#endif // po_function_H
